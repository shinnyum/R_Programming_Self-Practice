memory.limit()
memory.limit(size=4000)
object.size(boiler9$NOX발생량)
iris()
iris
library(e1071)
install.packages("e1071")
library(e1071)
x<-subset(iris, select=Sepal.Length:Species)
y<-as.factor(iris$Species)
model<-svm(x, y, type="C-classification", kernel="radial")
y
model<-svm(x, y, type="C-classification", kernel="radial")
model<-svm(x, y, kernel="radial")
model<-svm(x, y)
install.packages("caret")
install.packages("ROCR")
library(e1071)
library(caret)
library(ROCR)
read_excel("D:/work/dataset/boiler9_PCA.xlsx")
install.packages("read_excel")
("readxl")
library(readxl)
read_excel("D:/work/dataset/boiler9_PCA.xlsx")
library(e1071)
library(caret)
library(ROCR)
library(readxl)
read_excel("D:/work/dataset/boiler9_PCA.xlsx")
x<-subset(boiler9_PCA, select=-EFGrade)
boiler9_PCA <- read_excel("D:/work/dataset/boiler9_PCA.xlsx")
x<-subset(boiler9_PCA, select=-EFGrade)
y<-as.factor(boiler9_PCA$EFGrade)
model<-svm(x, y, type="C-classification", kernel="radial")
svm.pred<-predict(model,x)
#Show confusionMatrix
confusionMatrixTable<-table(Predicted=svm.pred,Reference=boiler9_PCA$EFGrade)
confusionMatrix(confusionMatrixTable,positive='TRUE')
plot(cmdscale(dist(subset(boiler9_PCA, select=-EFGrade))), col=boiler9_PCA$EFGrade, pch=c("o","+")[1:150%in%model$index+1])
confusionMatrixTable
confusionMatrix
confusionMatrix(confusionMatrixTable,positive='TRUE')
#Show confusionMatrix
confusionMatrixTable<-table(Predicted=svm.pred,Reference=boiler9_PCA$EFGrade)
confusionMatrixTable
model
install.packages("caret")
library(caret)
set.seed(1712)
inTrain <- createDataPartition(y = iris$Species, p = 0.7, list = F)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
training
# 표준화
training.data <- scale(training[-5])
summary(training.data)
# 모델 작성 (3개 군집)
iris.kmeans <- kmeans(training.data[,-5], centers = 3, iter.max = 10000)
iris.kmeans$centers
# 군집 확인
training$cluster <- as.factor(iris.kmeans$cluster)
qplot(Petal.Width, Petal.Length, colour = cluster, data = training)
table(training$Species, training$cluster)
# 적정 군집 갯수 결정 참고용
install.packages("NbClust")
library(NbClust)
nc <- NbClust(training.data, min.nc = 2, max.nc = 15, method = "kmeans")
par(mfrow=c(1,1))
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
wssplot <- function(data, nc = 15, seed = 1234) {
wss <- (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab = "Number of Clusters",
ylab = "Within groups sum of squares")}
wssplot(training.data)
# 새로운 데이터에 군집 할당
training.data <- as.data.frame(training.data)
modFit <- train(x = training.data[,-5],
y = training$cluster,
method = "rpart")
testing.data <- as.data.frame(scale(testing[-5]))
testClusterPred <- predict(modFit, testing.data)
table(testClusterPred ,testing$Species)
iris.kmeans
iris.kmeans$cluster
cluster_index <- iris.kmeans$cluster
cluster_index
cluster_index <- as.data.frame(iris.kmeans$cluster)
cluster_index
wssplot <- function(data, nc = 15, seed = 1234) {
wss <- (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab = "Number of Clusters",
ylab = "Within groups sum of squares")}
wssplot(training.data)
par(mfrow=c(1,1))
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
qplot(Petal.Width, Petal.Length, colour = cluster, data = training)
nc <- NbClust(training.data, min.nc = 2, max.nc = 15, method = "kmeans")
par(mfrow=c(1,1))
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
wssplot <- function(data, nc = 15, seed = 1234) {
wss <- (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab = "Number of Clusters",
ylab = "Within groups sum of squares")}
wssplot(training.data)
# 새로운 데이터에 군집 할당
training.data <- as.data.frame(training.data)
modFit <- train(x = training.data[,-5],
y = training$cluster,
method = "rpart")
testing.data <- as.data.frame(scale(testing[-5]))
testClusterPred <- predict(modFit, testing.data)
table(testClusterPred ,testing$Species)
wssplot <- function(data, nc = 15, seed = 1234) {
wss <- (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab = "Number of Clusters",
ylab = "Within groups sum of squares")}
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
nc <- NbClust(training.data, min.nc = 2, max.nc = 15, method = "kmeans")
